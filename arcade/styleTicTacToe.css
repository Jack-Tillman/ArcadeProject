/*Tic-Tac-Toe*/

:root {
    --cell-size: 100px; /*make a CSS variable to automate keeping cells equally sized*/
    --mark-size: calc(var(--cell-size) * .9); /*mark size will be 90% size of cell size*/ 
}

.game--board { 
    width:18.5rem;
    margin:50px auto;
    display:grid;
    grid-template-columns: repeat(3, auto);
    justify-content:center;
    align-content: center;
    justify-items: center;
    align-items: center;
}

.cell {
    width:var(--cell-size);
    height:var(--cell-size);
    border: 1px solid black;
    display:flex;
    justify-content: center;
    align-items: center;
    position: relative; /*setting .cell to relative and .cell.xbefore,after to absolute achieves perfectly centered X's*/
    cursor: pointer;
}

/*Excess border removal section*/
.cell:nth-child(-n + 3) {
    border-top: none;
}

.cell:nth-child(3n + 1) {
    border-left: none;
}

.cell:nth-child(3n + 3) {
    border-right:none;
}

.cell:last-child,
.cell:nth-child(7),
.cell:nth-child(8) {
    border-bottom: none;
}

/*if cell has an x or an o already, cursor changes to not-allowed */
.cell.x,
.cell.circle {
    cursor: not-allowed;
}

.cell.x::before,
.cell.x::after {
    background-color:rgb(0, 0, 0);
}

/*hovering over empty cells displays a lighter colored x or circle*/
.game--board.x .cell:not(.x):not(.circle):hover::before,
.game--board.x .cell:not(.x):not(.circle):hover::after {
    background-color: lightgrey;
}

.game--board.circle .cell:not(.x):not(.circle):hover::before{
    content: ''; /*empty string so both before and after elements render*/
    border-radius:50%;
    position: absolute;
    width: calc(var(--mark-size) * 0.625);
    height: calc(var(--mark-size) * 0.625);
    box-shadow: 0 0 0 calc(var(--mark-size) * 0.15) lightgrey;
}

/* :not(.x):not(.circle) ensures that the mark doesn't show up when hovering over a filled in cell*/
.cell.x::before,
.cell.x::after,
.game--board.x .cell:not(.x):not(.circle):hover::before,
.game--board.x .cell:not(.x):not(.circle):hover::after { 
    content: ''; /*empty string so both before and after elements render*/
    width: calc(var(--mark-size) * .15);
    height: var(--mark-size);
    position: absolute;
}
/*rotate 45 and -45 for before and after will get perfect X */
.cell.x::before,
.game--board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.game--board.x .cell:not(.x):not(.circle):hover::after  {
    transform: rotate(-45deg);
}

.cell.circle::before { 
    content: ''; /*empty string so both before and after elements render*/
    border-radius:50%;
    position: absolute;
    width: calc(var(--mark-size) * 0.625);
    height: calc(var(--mark-size) * 0.625);
    box-shadow: 0 0 0 calc(var(--mark-size) * 0.15) #000000;
}

.winning-message { 
    display:none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.9);
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color:white;
    font-size:6rem;
}

.winning-message button {
    font-size:3rem;
    background-color: white;
    border: 1px solid black;
    padding: 1rem 2rem;
    border-radius:10%;
    cursor: pointer;
}

.winning-message button:hover {
    background-color: black;
    color:white;
    border-color:white;
}

/*when a class called 'show' is added to winning message, then the display is changed from none to flex, displaying the winning message screen! */
.winning-message.show {
display:flex;
}